/* tslint:disable */
/* eslint-disable */
/**
 * Order Management Service API
 * API for managing buy/sell orders and order history.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CancelOrder200Response
 */
export interface CancelOrder200Response {
    /**
     * 
     * @type {string}
     * @memberof CancelOrder200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'details'?: string | null;
}
/**
 * 
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'type'?: OrderResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'stockSymbol'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'createdAt'?: string;
}

export const OrderResponseTypeEnum = {
    Buy: 'buy',
    Sell: 'sell'
} as const;

export type OrderResponseTypeEnum = typeof OrderResponseTypeEnum[keyof typeof OrderResponseTypeEnum];

/**
 * 
 * @export
 * @interface PlaceOrderRequest
 */
export interface PlaceOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof PlaceOrderRequest
     */
    'type': PlaceOrderRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PlaceOrderRequest
     */
    'stockSymbol': string;
    /**
     * 
     * @type {number}
     * @memberof PlaceOrderRequest
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof PlaceOrderRequest
     */
    'price': number;
}

export const PlaceOrderRequestTypeEnum = {
    Buy: 'buy',
    Sell: 'sell'
} as const;

export type PlaceOrderRequestTypeEnum = typeof PlaceOrderRequestTypeEnum[keyof typeof PlaceOrderRequestTypeEnum];

/**
 * 
 * @export
 * @interface UpdateOrderRequest
 */
export interface UpdateOrderRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderRequest
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderRequest
     */
    'price'?: number;
}

/**
 * OrderManagementApi - axios parameter creator
 * @export
 */
export const OrderManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel an order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('cancelOrder', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of a specific order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetails: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderDetails', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orders for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrders: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Place a buy or sell order
         * @param {PlaceOrderRequest} placeOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOrder: async (placeOrderRequest: PlaceOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeOrderRequest' is not null or undefined
            assertParamExists('placeOrder', 'placeOrderRequest', placeOrderRequest)
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(placeOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing order
         * @param {string} orderId 
         * @param {UpdateOrderRequest} updateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: async (orderId: string, updateOrderRequest: UpdateOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateOrder', 'orderId', orderId)
            // verify required parameter 'updateOrderRequest' is not null or undefined
            assertParamExists('updateOrder', 'updateOrderRequest', updateOrderRequest)
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderManagementApi - functional programming interface
 * @export
 */
export const OrderManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancel an order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrder(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelOrder200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrder(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagementApi.cancelOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get details of a specific order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderDetails(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderDetails(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagementApi.getOrderDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all orders for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOrders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserOrders(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagementApi.getUserOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Place a buy or sell order
         * @param {PlaceOrderRequest} placeOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placeOrder(placeOrderRequest: PlaceOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placeOrder(placeOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagementApi.placeOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing order
         * @param {string} orderId 
         * @param {UpdateOrderRequest} updateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(orderId: string, updateOrderRequest: UpdateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrder(orderId, updateOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderManagementApi.updateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderManagementApi - factory interface
 * @export
 */
export const OrderManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancel an order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<CancelOrder200Response> {
            return localVarFp.cancelOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of a specific order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetails(orderId: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse> {
            return localVarFp.getOrderDetails(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all orders for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrders(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderResponse>> {
            return localVarFp.getUserOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Place a buy or sell order
         * @param {PlaceOrderRequest} placeOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOrder(placeOrderRequest: PlaceOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse> {
            return localVarFp.placeOrder(placeOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing order
         * @param {string} orderId 
         * @param {UpdateOrderRequest} updateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(orderId: string, updateOrderRequest: UpdateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse> {
            return localVarFp.updateOrder(orderId, updateOrderRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderManagementApi - object-oriented interface
 * @export
 * @class OrderManagementApi
 * @extends {BaseAPI}
 */
export class OrderManagementApi extends BaseAPI {
    /**
     * 
     * @summary Cancel an order
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagementApi
     */
    public cancelOrder(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderManagementApiFp(this.configuration).cancelOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of a specific order
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagementApi
     */
    public getOrderDetails(orderId: string, options?: RawAxiosRequestConfig) {
        return OrderManagementApiFp(this.configuration).getOrderDetails(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all orders for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagementApi
     */
    public getUserOrders(options?: RawAxiosRequestConfig) {
        return OrderManagementApiFp(this.configuration).getUserOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Place a buy or sell order
     * @param {PlaceOrderRequest} placeOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagementApi
     */
    public placeOrder(placeOrderRequest: PlaceOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderManagementApiFp(this.configuration).placeOrder(placeOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing order
     * @param {string} orderId 
     * @param {UpdateOrderRequest} updateOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderManagementApi
     */
    public updateOrder(orderId: string, updateOrderRequest: UpdateOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderManagementApiFp(this.configuration).updateOrder(orderId, updateOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



