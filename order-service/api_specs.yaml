openapi: 3.0.0
info:
  title: Order Management Service API
  version: 1.0.1
  description: API for managing buy/sell orders and order history.
servers:
  - url: http://localhost:3001/orders
    description: Local development server
tags:
  - name: Order Management
    description: Operations related to placing, updating, and tracking orders

paths:
  /orders:
    post:
      summary: Place a buy or sell order
      operationId: placeOrder
      tags:
        - Order Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - stockSymbol
                - quantity
                - price
              properties:
                type:
                  type: string
                  enum: [buy, sell]
                  example: buy
                stockSymbol:
                  type: string
                  example: AAPL
                quantity:
                  type: integer
                  example: 10
                price:
                  type: number
                  format: float
                  example: 150.75
      responses:
        '201':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                example1:
                  summary: Sample successful order response
                  value:
                    orderId: ord123
                    type: buy
                    stockSymbol: AAPL
                    quantity: 10
                    price: 150.75
                    status: pending
                    createdAt: '2025-07-09T17:30:00Z'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    get:
      summary: Get all orders for a user
      operationId: getUserOrders
      tags:
        - Order Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
              examples:
                example1:
                  summary: Sample list of user orders
                  value:
                    - orderId: ord123
                      type: buy
                      stockSymbol: AAPL
                      quantity: 10
                      price: 150.75
                      status: pending
                      createdAt: '2025-07-09T17:30:00Z'
                    - orderId: ord124
                      type: sell
                      stockSymbol: GOOGL
                      quantity: 5
                      price: 2750.00
                      status: completed
                      createdAt: '2025-06-29T10:15:00Z'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /orders/{orderId}:
    get:
      summary: Get details of a specific order
      operationId: getOrderDetails
      tags:
        - Order Management
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                example1:
                  summary: Sample order details
                  value:
                    orderId: ord123
                    type: buy
                    stockSymbol: AAPL
                    quantity: 10
                    price: 150.75
                    status: pending
                    createdAt: '2025-07-09T17:30:00Z'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    put:
      summary: Update an existing order
      operationId: updateOrder
      tags:
        - Order Management
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 15
                price:
                  type: number
                  format: float
                  example: 160.00
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                example1:
                  summary: Updated order response
                  value:
                    orderId: ord123
                    type: buy
                    stockSymbol: AAPL
                    quantity: 15
                    price: 160.00
                    status: pending
                    createdAt: '2025-07-09T17:30:00Z'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    delete:
      summary: Cancel an order
      operationId: cancelOrder
      tags:
        - Order Management
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order cancelled successfully.
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
          example: ord123
        type:
          type: string
          enum: [buy, sell]
          example: buy
        stockSymbol:
          type: string
          example: AAPL
        quantity:
          type: integer
          example: 10
        price:
          type: number
          format: float
          example: 150.75
        status:
          type: string
          example: pending
        createdAt:
          type: string
          format: date-time
          example: '2025-07-09T17:30:00Z'
    
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid request
        details:
          type: string
          nullable: true
          example: Quantity must be a positive number
          

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 400
            message: Invalid input data
            details: Price must be a positive number

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 401
            message: Unauthorized
            details: Missing or invalid authentication token

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 404
            message: Order not found
            details: No order found with the given orderId

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 500
            message: Internal server error
            details: An unexpected error occurred while processing the request


   
       
