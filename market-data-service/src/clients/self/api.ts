/* tslint:disable */
/* eslint-disable */
/**
 * Market Data & Information Service API
 * API for retrieving real-time and historical market data, and company information.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'details'?: string;
}
/**
 * 
 * @export
 * @interface GetCompanyProfile200Response
 */
export interface GetCompanyProfile200Response {
    /**
     * 
     * @type {string}
     * @memberof GetCompanyProfile200Response
     */
    'symbol'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCompanyProfile200Response
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCompanyProfile200Response
     */
    'exchange'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCompanyProfile200Response
     */
    'industry'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCompanyProfile200Response
     */
    'sector'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCompanyProfile200Response
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCompanyProfile200Response
     */
    'website'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCompanyProfile200Response
     */
    'ceo'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetCompanyProfile200Response
     */
    'employees'?: number;
    /**
     * 
     * @type {GetCompanyProfile200ResponseFinancials}
     * @memberof GetCompanyProfile200Response
     */
    'financials'?: GetCompanyProfile200ResponseFinancials;
}
/**
 * 
 * @export
 * @interface GetCompanyProfile200ResponseFinancials
 */
export interface GetCompanyProfile200ResponseFinancials {
    /**
     * 
     * @type {number}
     * @memberof GetCompanyProfile200ResponseFinancials
     */
    'revenue'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetCompanyProfile200ResponseFinancials
     */
    'netIncome'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetCompanyProfile200ResponseFinancials
     */
    'marketCap'?: number;
}
/**
 * 
 * @export
 * @interface GetHistoricalData200Response
 */
export interface GetHistoricalData200Response {
    /**
     * 
     * @type {string}
     * @memberof GetHistoricalData200Response
     */
    'symbol'?: string;
    /**
     * 
     * @type {Array<GetHistoricalData200ResponseHistoryInner>}
     * @memberof GetHistoricalData200Response
     */
    'history'?: Array<GetHistoricalData200ResponseHistoryInner>;
}
/**
 * 
 * @export
 * @interface GetHistoricalData200ResponseHistoryInner
 */
export interface GetHistoricalData200ResponseHistoryInner {
    /**
     * 
     * @type {string}
     * @memberof GetHistoricalData200ResponseHistoryInner
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetHistoricalData200ResponseHistoryInner
     */
    'open'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetHistoricalData200ResponseHistoryInner
     */
    'high'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetHistoricalData200ResponseHistoryInner
     */
    'low'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetHistoricalData200ResponseHistoryInner
     */
    'close'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetHistoricalData200ResponseHistoryInner
     */
    'volume'?: number;
}
/**
 * 
 * @export
 * @interface GetMarketQuotes200ResponseInner
 */
export interface GetMarketQuotes200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof GetMarketQuotes200ResponseInner
     */
    'symbol'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetMarketQuotes200ResponseInner
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMarketQuotes200ResponseInner
     */
    'change'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMarketQuotes200ResponseInner
     */
    'changePercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMarketQuotes200ResponseInner
     */
    'timestamp'?: number;
}

/**
 * CompanyInformationApi - axios parameter creator
 * @export
 */
export const CompanyInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get company profile and financial statements
         * @param {string} symbol Stock symbol (e.g., AAPL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyProfile: async (symbol: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getCompanyProfile', 'symbol', symbol)
            const localVarPath = `/companies/{symbol}/profile`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyInformationApi - functional programming interface
 * @export
 */
export const CompanyInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get company profile and financial statements
         * @param {string} symbol Stock symbol (e.g., AAPL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyProfile(symbol: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCompanyProfile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyProfile(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompanyInformationApi.getCompanyProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompanyInformationApi - factory interface
 * @export
 */
export const CompanyInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyInformationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get company profile and financial statements
         * @param {string} symbol Stock symbol (e.g., AAPL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyProfile(symbol: string, options?: RawAxiosRequestConfig): AxiosPromise<GetCompanyProfile200Response> {
            return localVarFp.getCompanyProfile(symbol, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyInformationApi - object-oriented interface
 * @export
 * @class CompanyInformationApi
 * @extends {BaseAPI}
 */
export class CompanyInformationApi extends BaseAPI {
    /**
     * 
     * @summary Get company profile and financial statements
     * @param {string} symbol Stock symbol (e.g., AAPL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public getCompanyProfile(symbol: string, options?: RawAxiosRequestConfig) {
        return CompanyInformationApiFp(this.configuration).getCompanyProfile(symbol, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MarketDataApi - axios parameter creator
 * @export
 */
export const MarketDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get historical stock data for a symbol
         * @param {string} symbol Stock symbol (e.g., AAPL).
         * @param {GetHistoricalDataRangeEnum} [range] Time range for historical data.
         * @param {GetHistoricalDataIntervalEnum} [interval] Data interval.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalData: async (symbol: string, range?: GetHistoricalDataRangeEnum, interval?: GetHistoricalDataIntervalEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getHistoricalData', 'symbol', symbol)
            const localVarPath = `/market-data/history/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get real-time stock prices and quotes
         * @param {Array<string>} [symbols] Comma-separated list of stock symbols (e.g., AAPL,GOOGL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketQuotes: async (symbols?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/market-data/quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbols) {
                localVarQueryParameter['symbols'] = symbols;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketDataApi - functional programming interface
 * @export
 */
export const MarketDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get historical stock data for a symbol
         * @param {string} symbol Stock symbol (e.g., AAPL).
         * @param {GetHistoricalDataRangeEnum} [range] Time range for historical data.
         * @param {GetHistoricalDataIntervalEnum} [interval] Data interval.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricalData(symbol: string, range?: GetHistoricalDataRangeEnum, interval?: GetHistoricalDataIntervalEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHistoricalData200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoricalData(symbol, range, interval, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.getHistoricalData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get real-time stock prices and quotes
         * @param {Array<string>} [symbols] Comma-separated list of stock symbols (e.g., AAPL,GOOGL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketQuotes(symbols?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMarketQuotes200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketQuotes(symbols, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketDataApi.getMarketQuotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarketDataApi - factory interface
 * @export
 */
export const MarketDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketDataApiFp(configuration)
    return {
        /**
         * 
         * @summary Get historical stock data for a symbol
         * @param {string} symbol Stock symbol (e.g., AAPL).
         * @param {GetHistoricalDataRangeEnum} [range] Time range for historical data.
         * @param {GetHistoricalDataIntervalEnum} [interval] Data interval.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalData(symbol: string, range?: GetHistoricalDataRangeEnum, interval?: GetHistoricalDataIntervalEnum, options?: RawAxiosRequestConfig): AxiosPromise<GetHistoricalData200Response> {
            return localVarFp.getHistoricalData(symbol, range, interval, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get real-time stock prices and quotes
         * @param {Array<string>} [symbols] Comma-separated list of stock symbols (e.g., AAPL,GOOGL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketQuotes(symbols?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetMarketQuotes200ResponseInner>> {
            return localVarFp.getMarketQuotes(symbols, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketDataApi - object-oriented interface
 * @export
 * @class MarketDataApi
 * @extends {BaseAPI}
 */
export class MarketDataApi extends BaseAPI {
    /**
     * 
     * @summary Get historical stock data for a symbol
     * @param {string} symbol Stock symbol (e.g., AAPL).
     * @param {GetHistoricalDataRangeEnum} [range] Time range for historical data.
     * @param {GetHistoricalDataIntervalEnum} [interval] Data interval.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public getHistoricalData(symbol: string, range?: GetHistoricalDataRangeEnum, interval?: GetHistoricalDataIntervalEnum, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).getHistoricalData(symbol, range, interval, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get real-time stock prices and quotes
     * @param {Array<string>} [symbols] Comma-separated list of stock symbols (e.g., AAPL,GOOGL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketDataApi
     */
    public getMarketQuotes(symbols?: Array<string>, options?: RawAxiosRequestConfig) {
        return MarketDataApiFp(this.configuration).getMarketQuotes(symbols, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetHistoricalDataRangeEnum = {
    _1d: '1d',
    _5d: '5d',
    _1mo: '1mo',
    _3mo: '3mo',
    _6mo: '6mo',
    _1y: '1y',
    _5y: '5y',
    Max: 'max'
} as const;
export type GetHistoricalDataRangeEnum = typeof GetHistoricalDataRangeEnum[keyof typeof GetHistoricalDataRangeEnum];
/**
 * @export
 */
export const GetHistoricalDataIntervalEnum = {
    _1m: '1m',
    _2m: '2m',
    _5m: '5m',
    _15m: '15m',
    _30m: '30m',
    _60m: '60m',
    _90m: '90m',
    _1h: '1h',
    _1d: '1d',
    _5d: '5d',
    _1wk: '1wk',
    _1mo: '1mo',
    _3mo: '3mo'
} as const;
export type GetHistoricalDataIntervalEnum = typeof GetHistoricalDataIntervalEnum[keyof typeof GetHistoricalDataIntervalEnum];


