/* tslint:disable */
/* eslint-disable */
/**
 * Portfolio Management Service API
 * API for managing user portfolios, transactions, and performance metrics.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'details'?: string | null;
}
/**
 * 
 * @export
 * @interface GetUserPortfolio200Response
 */
export interface GetUserPortfolio200Response {
    /**
     * 
     * @type {Array<GetUserPortfolio200ResponseHoldingsInner>}
     * @memberof GetUserPortfolio200Response
     */
    'holdings'?: Array<GetUserPortfolio200ResponseHoldingsInner>;
}
/**
 * 
 * @export
 * @interface GetUserPortfolio200ResponseHoldingsInner
 */
export interface GetUserPortfolio200ResponseHoldingsInner {
    /**
     * 
     * @type {string}
     * @memberof GetUserPortfolio200ResponseHoldingsInner
     */
    'stockSymbol'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetUserPortfolio200ResponseHoldingsInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetUserPortfolio200ResponseHoldingsInner
     */
    'averagePrice'?: number;
}
/**
 * 
 * @export
 * @interface GetUserPortfolioSummary200Response
 */
export interface GetUserPortfolioSummary200Response {
    /**
     * 
     * @type {Array<GetUserPortfolioSummary200ResponseTransactionsInner>}
     * @memberof GetUserPortfolioSummary200Response
     */
    'transactions'?: Array<GetUserPortfolioSummary200ResponseTransactionsInner>;
    /**
     * 
     * @type {GetUserPortfolioSummary200ResponsePerformance}
     * @memberof GetUserPortfolioSummary200Response
     */
    'performance'?: GetUserPortfolioSummary200ResponsePerformance;
}
/**
 * 
 * @export
 * @interface GetUserPortfolioSummary200ResponsePerformance
 */
export interface GetUserPortfolioSummary200ResponsePerformance {
    /**
     * 
     * @type {number}
     * @memberof GetUserPortfolioSummary200ResponsePerformance
     */
    'totalValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetUserPortfolioSummary200ResponsePerformance
     */
    'totalInvested'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetUserPortfolioSummary200ResponsePerformance
     */
    'profitLoss'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetUserPortfolioSummary200ResponsePerformance
     */
    'returnPercentage'?: number;
}
/**
 * 
 * @export
 * @interface GetUserPortfolioSummary200ResponseTransactionsInner
 */
export interface GetUserPortfolioSummary200ResponseTransactionsInner {
    /**
     * 
     * @type {string}
     * @memberof GetUserPortfolioSummary200ResponseTransactionsInner
     */
    'transactionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserPortfolioSummary200ResponseTransactionsInner
     */
    'stockSymbol'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserPortfolioSummary200ResponseTransactionsInner
     */
    'type'?: GetUserPortfolioSummary200ResponseTransactionsInnerTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof GetUserPortfolioSummary200ResponseTransactionsInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetUserPortfolioSummary200ResponseTransactionsInner
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserPortfolioSummary200ResponseTransactionsInner
     */
    'date'?: string;
}

export const GetUserPortfolioSummary200ResponseTransactionsInnerTypeEnum = {
    Buy: 'buy',
    Sell: 'sell'
} as const;

export type GetUserPortfolioSummary200ResponseTransactionsInnerTypeEnum = typeof GetUserPortfolioSummary200ResponseTransactionsInnerTypeEnum[keyof typeof GetUserPortfolioSummary200ResponseTransactionsInnerTypeEnum];


/**
 * PortfolioManagementApi - axios parameter creator
 * @export
 */
export const PortfolioManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve user\'s current portfolio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPortfolio: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/portfolio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve combined portfolio transactions and performance summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPortfolioSummary: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/portfolio-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfolioManagementApi - functional programming interface
 * @export
 */
export const PortfolioManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfolioManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve user\'s current portfolio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPortfolio(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserPortfolio200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPortfolio(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioManagementApi.getUserPortfolio']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve combined portfolio transactions and performance summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPortfolioSummary(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserPortfolioSummary200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPortfolioSummary(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioManagementApi.getUserPortfolioSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PortfolioManagementApi - factory interface
 * @export
 */
export const PortfolioManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfolioManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve user\'s current portfolio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPortfolio(options?: RawAxiosRequestConfig): AxiosPromise<GetUserPortfolio200Response> {
            return localVarFp.getUserPortfolio(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve combined portfolio transactions and performance summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPortfolioSummary(options?: RawAxiosRequestConfig): AxiosPromise<GetUserPortfolioSummary200Response> {
            return localVarFp.getUserPortfolioSummary(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PortfolioManagementApi - object-oriented interface
 * @export
 * @class PortfolioManagementApi
 * @extends {BaseAPI}
 */
export class PortfolioManagementApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve user\'s current portfolio
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getUserPortfolio(options?: RawAxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getUserPortfolio(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve combined portfolio transactions and performance summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getUserPortfolioSummary(options?: RawAxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getUserPortfolioSummary(options).then((request) => request(this.axios, this.basePath));
    }
}



