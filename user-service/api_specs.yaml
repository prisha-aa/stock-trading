openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
  description: API for managing user accounts and profiles.

servers:
  - url: http://localhost:3000/users
    description: Local development server

tags:
  - name: User Management
    description: Operations related to user registration, login, and profile management.

paths:
  /register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully.
                  userId:
                    type: number
                    example: 123
        '400':
          $ref: '#/components/responses/BadRequest'

  /login:
    post:
      summary: User login
      operationId: loginUser
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
      responses:
        '200':
          description: User logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful.
                  userId:
                    type: number
                    example: 123
                  token:
                    type: string
                    example: eyJhbGciOi...
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /logout:
    post:
      summary: User logout
      operationId: logoutUser
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: eyJhbGciOi...
      responses:
        '200':
          description: User logged out successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /profile:
    get:
      summary: Get user profile
      operationId: getUserProfile
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: number
                  username:
                    type: string
                  email:
                    type: string
                    format: email
                  firstName:
                    type: string
                  lastName:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update user profile
      operationId: updateUserProfile
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '200':
          description: User profile updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User profile updated successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /password/reset-request:
    post:
      summary: Request password reset
      operationId: requestPasswordReset
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
      responses:
        '200':
          description: Password reset email sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset email sent.
        '400':
          $ref: '#/components/responses/BadRequest'

  /password/reset:
    post:
      summary: Reset password
      operationId: resetPassword
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  example: some_long_token
                newPassword:
                  type: string
                  format: password
                  example: NewSecureP@ssw0rd
      responses:
        '200':
          description: Password reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully.
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid input
        details:
          type: string
          example: Email format is incorrect or already in use

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 400
            message: Bad request
            details: The email provided is not valid

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 401
            message: Unauthorized
            details: Invalid or missing authentication token

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 404
            message: User not found
            details: The user ID is invalid or no user exists
