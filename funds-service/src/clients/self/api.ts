/* tslint:disable */
/* eslint-disable */
/**
 * Fund Service API
 * API for managing fund transactions and balance overview for the authenticated user.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateTransaction201Response
 */
export interface CreateTransaction201Response {
    /**
     * 
     * @type {string}
     * @memberof CreateTransaction201Response
     */
    'transactionId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateTransaction201Response
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateTransaction201Response
     */
    'type'?: CreateTransaction201ResponseTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateTransaction201Response
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateTransaction201Response
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTransaction201Response
     */
    'date'?: string;
}

export const CreateTransaction201ResponseTypeEnum = {
    Deposit: 'deposit',
    Withdrawal: 'withdrawal'
} as const;

export type CreateTransaction201ResponseTypeEnum = typeof CreateTransaction201ResponseTypeEnum[keyof typeof CreateTransaction201ResponseTypeEnum];

/**
 * 
 * @export
 * @interface CreateTransactionRequest
 */
export interface CreateTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTransactionRequest
     */
    'type': CreateTransactionRequestTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateTransactionRequest
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTransactionRequest
     */
    'description'?: string;
}

export const CreateTransactionRequestTypeEnum = {
    Deposit: 'deposit',
    Withdrawal: 'withdrawal'
} as const;

export type CreateTransactionRequestTypeEnum = typeof CreateTransactionRequestTypeEnum[keyof typeof CreateTransactionRequestTypeEnum];

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'details'?: string | null;
}
/**
 * 
 * @export
 * @interface GetFundsOverview200Response
 */
export interface GetFundsOverview200Response {
    /**
     * 
     * @type {number}
     * @memberof GetFundsOverview200Response
     */
    'balance'?: number;
    /**
     * 
     * @type {Array<GetFundsOverview200ResponseTransactionsInner>}
     * @memberof GetFundsOverview200Response
     */
    'transactions'?: Array<GetFundsOverview200ResponseTransactionsInner>;
}
/**
 * 
 * @export
 * @interface GetFundsOverview200ResponseTransactionsInner
 */
export interface GetFundsOverview200ResponseTransactionsInner {
    /**
     * 
     * @type {string}
     * @memberof GetFundsOverview200ResponseTransactionsInner
     */
    'transactionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFundsOverview200ResponseTransactionsInner
     */
    'type'?: GetFundsOverview200ResponseTransactionsInnerTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof GetFundsOverview200ResponseTransactionsInner
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetFundsOverview200ResponseTransactionsInner
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFundsOverview200ResponseTransactionsInner
     */
    'description'?: string;
}

export const GetFundsOverview200ResponseTransactionsInnerTypeEnum = {
    Deposit: 'deposit',
    Withdrawal: 'withdrawal'
} as const;

export type GetFundsOverview200ResponseTransactionsInnerTypeEnum = typeof GetFundsOverview200ResponseTransactionsInnerTypeEnum[keyof typeof GetFundsOverview200ResponseTransactionsInnerTypeEnum];


/**
 * FundServiceApi - axios parameter creator
 * @export
 */
export const FundServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a deposit or withdrawal transaction
         * @param {CreateTransactionRequest} createTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction: async (createTransactionRequest: CreateTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTransactionRequest' is not null or undefined
            assertParamExists('createTransaction', 'createTransactionRequest', createTransactionRequest)
            const localVarPath = `/funds/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve balance and recent transactions for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundsOverview: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/funds/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FundServiceApi - functional programming interface
 * @export
 */
export const FundServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FundServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a deposit or withdrawal transaction
         * @param {CreateTransactionRequest} createTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransaction(createTransactionRequest: CreateTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransaction201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransaction(createTransactionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundServiceApi.createTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve balance and recent transactions for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFundsOverview(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFundsOverview200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundsOverview(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundServiceApi.getFundsOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FundServiceApi - factory interface
 * @export
 */
export const FundServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FundServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a deposit or withdrawal transaction
         * @param {CreateTransactionRequest} createTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(createTransactionRequest: CreateTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateTransaction201Response> {
            return localVarFp.createTransaction(createTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve balance and recent transactions for the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundsOverview(options?: RawAxiosRequestConfig): AxiosPromise<GetFundsOverview200Response> {
            return localVarFp.getFundsOverview(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FundServiceApi - object-oriented interface
 * @export
 * @class FundServiceApi
 * @extends {BaseAPI}
 */
export class FundServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create a deposit or withdrawal transaction
     * @param {CreateTransactionRequest} createTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundServiceApi
     */
    public createTransaction(createTransactionRequest: CreateTransactionRequest, options?: RawAxiosRequestConfig) {
        return FundServiceApiFp(this.configuration).createTransaction(createTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve balance and recent transactions for the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundServiceApi
     */
    public getFundsOverview(options?: RawAxiosRequestConfig) {
        return FundServiceApiFp(this.configuration).getFundsOverview(options).then((request) => request(this.axios, this.basePath));
    }
}



